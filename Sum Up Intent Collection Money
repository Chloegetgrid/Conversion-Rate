
### Sum Total sum up money we want to collect for a user
SELECT
    collection_intents.date AS date,
    SUM(temp.captured) AS previously_captured,
    MIN(temp.advance_amount) AS advance_amount,
    MIN(temp.advance_amount) - SUM(temp.captured) AS outstanding
from
(
SELECT 
    DISTINCT DATE(processing_scheduled_at) AS date
FROM 
    collection_intents 
WHERE
    state LIKE '%SCHEDULED%'
    AND client_id = 1964150
) collection_intents 
LEFT JOIN 
(
    select
        collected_per_day.date AS date,
        collected_per_day.captured AS captured,
        advances.amount AS advance_amount
    from
    (
        SELECT
            advance_id,
            DATE(created_at) AS date,
            SUM(captured_amount) AS captured
        FROM
            advance_payments
        WHERE
            stripe_failure_code IS NULL
        GROUP by
            1, 2
    ) collected_per_day
    join 
        advances ON advances.id = collected_per_day.advance_id
    join 
        cashboosts ON cashboosts.id = advances.cashboost_id
    join
        clients on clients.id = cashboosts.client_id
    WHERE
        client_id = 1964150
) temp ON collection_intents.date > temp.date
group by 
    1
order by
    1 desc
    
    
    
    
### Sum Total sum up money we want to collect 
Right Version: 
SELECT
    ci.date AS date,
    SUM(q.captured) AS previously_captured,
    SUM(q.advance_amount) AS advance_amount,
    SUM(q.advance_amount) - SUM(q.captured) AS outstanding
from
(
SELECT 
    DISTINCT DATE(processing_scheduled_at) AS date
FROM 
    collection_intents 
WHERE
    state LIKE '%SCHEDULED%'
) ci 
LEFT JOIN 
(SELECT
        collected_per_day.date AS date,
        SUM(collected_per_day.captured) AS captured,
        SUM(a.amount) AS advance_amount
    FROM
    (
        SELECT
            advance_id,
            DATE(created_at) AS date,
            SUM(captured_amount) AS captured
        FROM
            advance_payments
        WHERE
            stripe_failure_code IS NULL
        GROUP by
            1, 2
    ) collected_per_day
    join 
        advances a ON a.id = collected_per_day.advance_id
    join 
        cashboosts cb ON cb.id = a.cashboost_id
    join
        clients c on c.id = cb.client_id
    GROUP BY 1
    ORDER BY 1 DESC
) q ON ci.date > q.date
group by 
    1
order by
    1 desc



SELECT
    collection_intents.date AS date,
    SUM(temp.captured) AS previously_captured,
    SUM(temp.advance_amount) AS advance_amount,
    SUM(temp.advance_amount) - SUM(temp.captured) AS outstanding
from
(
SELECT 
    DISTINCT DATE(processing_scheduled_at) AS date
FROM 
    collection_intents 
WHERE
    state LIKE '%SCHEDULED%'
) collection_intents 
LEFT JOIN 
(
    select
        collected_per_day.date AS date, clients.id,
        collected_per_day.captured AS captured,
        advances.amount AS advance_amount
    from
    (
        SELECT
            advance_id,
            DATE(created_at) AS date, 
            SUM(captured_amount) AS captured
        FROM
            advance_payments
        WHERE
            stripe_failure_code IS NULL
        GROUP by
            1, 2
    ) collected_per_day
    join 
        advances ON advances.id = collected_per_day.advance_id
    join 
        cashboosts ON cashboosts.id = advances.cashboost_id
    JOIN
        clients on clients.id = cashboosts.client_id
    JOIN 
        collection_intents ON collection_intents.client_id = cashboosts.client_id 
) temp ON collection_intents.date > temp.date
group by 
    1
order by
    1 desc
