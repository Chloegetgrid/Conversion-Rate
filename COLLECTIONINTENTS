# Julian's Version select only active, only gather future collection intents.
SELECT TABLE1.DATE, SUM(TABLE1.OUTSTANDING)
FROM
(SELECT
    advance_payments.advance_id,
    clients.id client_id,
#     advance_payments.DATE,
    advance_payments.captured,
    advances.AMOUNT,
    (advances.AMOUNT - advance_payments.captured) OUTSTANDING,
    collection_intents.DATE DATE
FROM 
    (  
    SELECT
        advance_id,
#         DATE(created_at) AS DATE,
        SUM(captured_amount) AS captured
    FROM
        advance_payments
    WHERE
        stripe_failure_code IS NULL
    GROUP BY
        1
    ORDER BY 2 DESC
    ) advance_payments 
    INNER JOIN (SELECT ID, AMOUNT, cashboost_id FROM advances WHERE archived_at IS NULL) advances ON advances.id = advance_payments.advance_id
    INNER JOIN (SELECT DISTINCT id, client_id FROM cashboosts) cashboosts ON advances.cashboost_id = cashboosts.id
    INNER JOIN (SELECT DISTINCT id FROM clients) clients ON clients.id = cashboosts.client_id
    INNER JOIN (
        SELECT 
            DATE(processing_scheduled_at) DATE, client_id
#             MIN(processing_scheduled_at) MIN_PROCESSING_SCHEDULED
        FROM 
            collection_intents
        WHERE 
            state = "COLLECTION_INTENT_STATE_SCHEDULED"
        AND is_active
        GROUP BY
            1, 2) collection_intents on collection_intents.client_id = clients.id

        GROUP BY 1, 3, 6
        ORDER BY 3 DESC) TABLE1
WHERE OUTSTANDING > 0
GROUP BY 1
ORDER BY 1 DESC;

# use ranking system at SQL5.7
SET @ROW_NUMBER = 0;
SELECT @ROW_NUMBER:= @ROW_NUMBER+1, client_id, processing_scheduled_at
FROM collection_intents
WHERE archived_at IS NULL
GROUP BY 2, 3
ORDER BY 1

# Chloe First Version. cannot sum at the end bc duplicates
SELECT
    advance_payments.advance_id,
    clients.id client_id,
    advance_payments.DATE,
    advance_payments.captured,
    advances.AMOUNT,
    (advances.AMOUNT - advance_payments.captured) OUTSTANDING
FROM
    (
    SELECT
        advance_id,
        DATE(created_at) AS DATE,
        SUM(captured_amount) AS captured
    FROM
        advance_payments
    WHERE
        stripe_failure_code IS NULL
    GROUP BY
        1, 2
    ORDER BY 2 DESC
    ) advance_payments
    INNER JOIN (SELECT ID, AMOUNT, cashboost_id FROM advances WHERE archived_at IS NULL) advances ON advances.id = advance_payments.advance_id
    INNER JOIN (SELECT DISTINCT id, client_id FROM cashboosts) cashboosts ON advances.cashboost_id = cashboosts.id
    INNER JOIN (SELECT DISTINCT id FROM clients) clients ON clients.id = cashboosts.client_id
    INNER JOIN (
        SELECT
            DATE(processing_scheduled_at) DATE, client_id,
            MIN(processing_scheduled_at) MIN_PROCESSING_SCHEDULED
        FROM
            collection_intents
        WHERE
            state = "COLLECTION_INTENT_STATE_SCHEDULED"
        GROUP BY
            1, 2) collection_intents on collection_intents.client_id = clients.id
        GROUP BY 1, 3
        ORDER BY 3 DESC


#NO VALUES AFTER SEP 22.
SELECT
    collection_intents.DATE,
    SUM(advance_payments.captured),
    SUM(advances.AMOUNT),
    SUM((advances.AMOUNT - advance_payments.captured)) OUTSTANDING
FROM
(SELECT
            DATE(processing_scheduled_at) DATE, client_id
#             MIN(processing_scheduled_at) MIN_PROCESSING_SCHEDULED
        FROM
            collection_intents
        WHERE
            state = "COLLECTION_INTENT_STATE_SCHEDULED"
        AND is_active
        GROUP BY
            1, 2) collection_intents
LEFT JOIN (SELECT DISTINCT id FROM clients) clients ON collection_intents.client_id = clients.id
LEFT JOIN (SELECT ID, AMOUNT, cashboost_id FROM advances WHERE archived_at IS NULL) advances ON advances.id = clients.id
LEFT JOIN (SELECT DISTINCT id, client_id FROM cashboosts) cashboosts ON advances.cashboost_id = cashboosts.id
LEFT JOIN (SELECT
        advance_id,
#         DATE(created_at) AS DATE,
        SUM(captured_amount) AS captured
    FROM
        advance_payments
    WHERE
        stripe_failure_code IS NULL
    GROUP BY
        1) advance_payments ON advances.id = advance_payments.advance_id
GROUP BY 1
ORDER BY 1 DESC;

# created from collection intents
SELECT collection_intents.DATE, collection_intents.client_id, collection_intents.ID COLLECTION_ID, clients.id client_id, cashboosts.id CASHBOOSTS_ID,
cashboosts.client_checkout_amount,advance_payments.captured, (cashboosts.client_checkout_amount - advance_payments.captured) AS OUTSTANDING
FROM
(SELECT
            DATE(processing_scheduled_at) DATE, client_id, ID
# one client only have one processing_scheduled_at, no need for min(processing_scheduled_at)
        FROM
            collection_intents
        WHERE
            state = "COLLECTION_INTENT_STATE_SCHEDULED"
    ) collection_intents
INNER JOIN clients ON collection_intents.client_id = clients.id
# CASHBOOSTS CAUSED MANY DUPLICATES.
INNER JOIN (SELECT DISTINCT id, client_id, client_checkout_amount FROM cashboosts WHERE archived_at IS NULL) cashboosts ON clients.id = cashboosts.client_id
LEFT JOIN (SELECT ID, AMOUNT, cashboost_id FROM advances WHERE archived_at IS NULL) advances ON advances.id = cashboosts.id
LEFT JOIN (SELECT advance_id, DATE(created_at) AS DATE, SUM(captured_amount) AS captured
    FROM advance_payments
    WHERE stripe_failure_code IS NULL
    GROUP BY 1, 2
    ORDER BY 2 DESC) advance_payments ON advances.id = advance_payments.advance_id
ORDER BY 1 DESC;

# For one client,
SELECT
    collection_intents.date AS date,
    SUM(temp.captured) AS previously_captured,
    MIN(temp.advance_amount) AS advance_amount,
    MIN(temp.advance_amount) - SUM(temp.captured) AS outstanding
from
(
SELECT
    DISTINCT DATE(processing_scheduled_at) AS date
FROM
    collection_intents
WHERE
    state LIKE '%SCHEDULED%'
    AND client_id = 1092531
) collection_intents
LEFT JOIN
(
    select
        collected_per_day.date AS date,
        collected_per_day.captured AS captured,
        advances.amount AS advance_amount
    from
    (
        SELECT
            advance_id,
            DATE(created_at) AS date,
            SUM(captured_amount) AS captured
        FROM
            advance_payments
        WHERE
            stripe_failure_code IS NULL
        GROUP by
            1, 2
    ) collected_per_day
    join
        advances ON advances.id = collected_per_day.advance_id
    join
        cashboosts ON cashboosts.id = advances.cashboost_id
    join
        clients on clients.id = cashboosts.client_id
    WHERE
        client_id = 1092531
) temp ON collection_intents.date > temp.date
group by
    1
order by
    1 desc;

SELECT TEMP.DATE, SUM(TEMP.AMOUNT), SUM(TEMP.CAPTURED), SUM(TEMP.OUTSTANDING)
FROM
(SELECT
        collection_intents.DATE DATE,
        collection_intents.client_id,
        collection_intents.ID COLLECTION_ID,
        cashboosts.id CASHBOOSTS_ID,
        IFNULL(cashboosts.client_checkout_amount,0) AMOUNT,
        IFNULL(advance_payments.captured,0) CAPTURED,
        IFNULL((cashboosts.client_checkout_amount - advance_payments.captured),0) AS OUTSTANDING
FROM
(SELECT
        DATE(processing_scheduled_at) DATE,
        client_id, ID
# one client only have one processing_scheduled_at, no need for min(processing_scheduled_at)
        FROM
            collection_intents
        WHERE
            state = "COLLECTION_INTENT_STATE_SCHEDULED"
    ) collection_intents
INNER JOIN clients ON collection_intents.client_id = clients.id
# CASHBOOSTS CAUSED MANY DUPLICATES.
INNER JOIN (SELECT DISTINCT id, client_id, client_checkout_amount FROM cashboosts WHERE archived_at IS NULL) cashboosts ON clients.id = cashboosts.client_id
LEFT JOIN (SELECT ID, AMOUNT, cashboost_id FROM advances WHERE archived_at IS NULL) advances ON advances.id = cashboosts.id
LEFT JOIN (SELECT advance_id, DATE(created_at) AS DATE, SUM(captured_amount) AS captured
    FROM advance_payments
    WHERE stripe_failure_code IS NULL
    GROUP BY 1, 2
    ORDER BY 2 DESC) advance_payments ON advances.id = advance_payments.advance_id
ORDER BY 1 DESC) TEMP
GROUP BY 1
ORDER BY 1 DESC;



SELECT
        collection_intents.DATE DATE,
        collection_intents.client_id,
        cashboosts.id CASHBOOSTS_ID,
        IFNULL(advances.amount,0) AMOUNT,
        IFNULL(advance_payments.captured,0) CAPTURED,
        IFNULL((advances.amount - advance_payments.captured),0) AS OUTSTANDING,
        advance_payments.DATE
#        ,
#        TEMP.DATE
FROM
(SELECT
        DATE(processing_scheduled_at) DATE,
        client_id, MIN(processing_scheduled_at)
# one client only have one processing_scheduled_at, no need for min(processing_scheduled_at)
        FROM
            collection_intents
        WHERE
            state = "COLLECTION_INTENT_STATE_SCHEDULED"
        GROUP BY 1,2
        ORDER BY 1 DESC
    ) collection_intents
INNER JOIN clients ON collection_intents.client_id = clients.id
# CASHBOOSTS CAUSED MANY DUPLICATES.
INNER JOIN cashboosts ON clients.id = cashboosts.client_id AND cashboosts.archived_at IS NULL
LEFT JOIN (SELECT ID, AMOUNT, cashboost_id FROM advances WHERE archived_at IS NULL) advances ON advances.cashboost_id = cashboosts.id
LEFT JOIN (SELECT advance_id, DATE(created_at) AS DATE, SUM(captured_amount) AS captured
    FROM advance_payments
    WHERE stripe_failure_code IS NULL
    GROUP BY 1, 2
    ORDER BY 2 DESC) advance_payments ON advances.id = advance_payments.advance_id
LEFT JOIN (SELECT advance_id, DATE(advance_payments.created_at) AS DATE, SUM(captured_amount) AS captured, advances.id, cashboosts.client_id, advances.amount
    FROM advance_payments
INNER JOIN advances ON advances.id = advance_payments.advance_id
INNER JOIN cashboosts ON advances.cashboost_id = cashboosts.id AND cashboosts.archived_at IS NULL
WHERE stripe_failure_code IS NULL
    GROUP BY 1, 2) TEMP ON  TEMP.DATE + 1 < collection_intents.DATE
ORDER BY 2,1;

# CLOSE
SELECT TEMP.DATE, client_id, SUM(TEMP.captured) AS CAPTURED,
       MAX(TEMP.amount) AS AMOUNT
#     SUM(advance_payments.amount)- SUM(advance_payments.captured)
FROM
(SELECT collection_intents.DATE, collection_intents.client_id,
    advance_payments.captured, advance_payments.AMOUNT
FROM
     (SELECT
        DATE(processing_scheduled_at) DATE,
        client_id
        FROM
            collection_intents
        WHERE
            state = "COLLECTION_INTENT_STATE_SCHEDULED"
        GROUP BY 1,2
        ORDER BY 1 DESC) collection_intents
LEFT JOIN
(SELECT advance_id, DATE(advance_payments.created_at) AS DATE, SUM(captured_amount) AS captured,
        cashboosts.client_id client_id, advances.amount amount
    FROM advance_payments
INNER JOIN advances ON advances.id = advance_payments.advance_id
INNER JOIN cashboosts ON advances.cashboost_id = cashboosts.id AND cashboosts.archived_at IS NULL
WHERE stripe_failure_code IS NULL
# AND cashboosts.client_id = 2075329
    GROUP BY 1, 2
    ORDER BY 1, 2 DESC) advance_payments
    ON advance_payments.DATE < collection_intents.DATE
    AND advance_payments.client_id = collection_intents.client_id
) TEMP
GROUP BY 1,2
ORDER BY 1 DESC;

# ORIGINAL SUB-QUERY FOR SECOND TABLE
SELECT advance_id, DATE(advance_payments.created_at) AS DATE, SUM(captured_amount) AS captured,
        cashboosts.client_id client_id, advances.amount amount
    FROM advance_payments
INNER JOIN advances ON advances.id = advance_payments.advance_id
INNER JOIN cashboosts ON advances.cashboost_id = cashboosts.id AND cashboosts.archived_at IS NULL
WHERE stripe_failure_code IS NULL
# AND cashboosts.client_id = 2075329
    GROUP BY 1, 2
    ORDER BY 1, 2 DESC;

# CHANGED SUB-QUERY FOR SECOND TABLE
SELECT DATE(advance_payments.DATE) AS DATE, advances.id, advances.amount, cashboosts.client_id, captured
    FROM advances
    LEFT JOIN (SELECT advance_id, DATE(advance_payments.created_at) AS DATE, SUM(captured_amount) AS captured
        FROM advance_payments
        WHERE stripe_failure_code IS NULL
        AND advance_payments.archived_at IS NULL
        GROUP BY 1,2) advance_payments
        ON advances.id = advance_payments.advance_id
    INNER JOIN cashboosts ON advances.cashboost_id = cashboosts.id AND cashboosts.archived_at IS NULL
    WHERE advances.archived_at IS NULL;

# NEAR FINAL VERSION - CHANGED SECOND TABLE, DOES NOT WORK RIGHT NOW
SELECT TEMP1.DATE, TEMP1.client_id, SUM(TEMP1.captured) AS CAPTURED,
           SUM(TEMP2.amount) AS AMOUNT, (SUM(TEMP2.amount)-SUM(TEMP1.captured)) AS OUTSTANDING
#     SUM(advance_payments.amount)- SUM(advance_payments.captured)
FROM
(SELECT TEMP1.DATE, TEMP1.client_id, SUM(TEMP1.captured) AS CAPTURED,
           SUM(TEMP1.amount) AS AMOUNT, (SUM(TEMP1.amount)-SUM(TEMP1.captured)) AS OUTSTANDING
#     SUM(advance_payments.amount)- SUM(advance_payments.captured)
FROM
( SELECT TEMP1.DATE, TEMP1.client_id, SUM(TEMP1.captured) AS CAPTURED,
           SUM(TEMP1.amount) AS AMOUNT, (SUM(TEMP1.amount)-SUM(TEMP1.captured)) AS OUTSTANDING
#     SUM(advance_payments.amount)- SUM(advance_payments.captured)
FROM
(SELECT collection_intents.DATE, collection_intents.client_id,
    advances.captured, advances.AMOUNT
FROM
     (SELECT
        DATE(processing_scheduled_at) DATE,
        client_id
        FROM
            collection_intents
        WHERE
            state = "COLLECTION_INTENT_STATE_SCHEDULED"
        GROUP BY 1,2
        ORDER BY 1 DESC) collection_intents
JOIN
    (SELECT advances.id advance_id, advances.DATE payout_date, advance_payments.DATE payback_date, IFNULL(advance_payments.captured,0) captured,
       advances.amount, cashboosts.client_id
        FROM (SELECT DATE(funding_date) DATE, cashboost_id, id, SUM(amount) AMOUNT
        FROM advances
        WHERE archived_at IS NULL
        AND accounting_type = 'ADVANCE_ACCOUNTING_TYPE_STATE_MACHINE'
        GROUP BY 1 ,2, 3) advances
LEFT JOIN
    (SELECT
                advance_id,
                DATE(created_at) AS DATE,
                SUM(captured_amount) AS captured
            FROM
                advance_payments
            GROUP by
                1, 2) advance_payments
ON advances.id = advance_payments.advance_id
AND advance_payments.DATE > advances.DATE
INNER JOIN cashboosts ON cashboosts.id = advances.cashboost_id
ORDER BY 4 desc,5 desc, 6) advances
    ON advances.payout_date < collection_intents.DATE
    AND advances.client_id = collection_intents.client_id
    ORDER BY 1 DESC,2) TEMP1
GROUP BY 1,2
ORDER BY 2, 1 DESC) TEMP1
INNER JOIN  (
      ) TEMP1
GROUP BY 1,2
ORDER BY 2, 1 DESC) TEMP2
ON TEMP1.DATE = TEMP2.DATE
AND TEMP1.client_id = TEMP2.client_id
GROUP BY 1,2
ORDER BY 1 DESC;

SELECT TEMP1.DATE, TEMP1.client_id, SUM(TEMP1.captured) AS CAPTURED,
           SUM(TEMP2.amount) AS AMOUNT, (SUM(TEMP2.amount)-SUM(TEMP1.captured)) AS OUTSTANDING
#     SUM(advance_payments.amount)- SUM(advance_payments.captured)
FROM
(SELECT TEMP1.DATE, TEMP1.client_id, SUM(TEMP1.captured) AS CAPTURED,
           SUM(TEMP1.amount) AS AMOUNT, (SUM(TEMP1.amount)-SUM(TEMP1.captured)) AS OUTSTANDING
#     SUM(advance_payments.amount)- SUM(advance_payments.captured)
FROM
(SELECT collection_intents.DATE, collection_intents.client_id,
    advances.captured, advances.AMOUNT
FROM
     (SELECT
        DATE(processing_scheduled_at) DATE,
        client_id
        FROM
            collection_intents
        WHERE
            state = "COLLECTION_INTENT_STATE_SCHEDULED"
        GROUP BY 1,2
        ORDER BY 1 DESC) collection_intents
JOIN
    (SELECT advances.id advance_id, advances.DATE payout_date, advance_payments.DATE payback_date, IFNULL(advance_payments.captured,0) captured,
       advances.amount, cashboosts.client_id
        FROM (SELECT DATE(funding_date) DATE, cashboost_id, id, SUM(amount) AMOUNT
        FROM advances
        WHERE archived_at IS NULL
        AND accounting_type = 'ADVANCE_ACCOUNTING_TYPE_STATE_MACHINE'
        GROUP BY 1 ,2, 3) advances
LEFT JOIN
    (SELECT
                advance_id,
                DATE(created_at) AS DATE,
                SUM(captured_amount) AS captured
            FROM
                advance_payments
            GROUP by
                1, 2) advance_payments
ON advances.id = advance_payments.advance_id
AND advance_payments.DATE > advances.DATE
INNER JOIN cashboosts ON cashboosts.id = advances.cashboost_id
ORDER BY 4 desc,5 desc, 6) advances
    ON advances.payback_date < collection_intents.DATE
    AND advances.client_id = collection_intents.client_id
    ORDER BY 1 DESC,2) TEMP1
GROUP BY 1,2
ORDER BY 2, 1 DESC) TEMP1
INNER JOIN  (
    SELECT TEMP1.DATE, TEMP1.client_id, SUM(TEMP1.captured) AS CAPTURED,
           SUM(TEMP1.amount) AS AMOUNT, (SUM(TEMP1.amount)-SUM(TEMP1.captured)) AS OUTSTANDING
#     SUM(advance_payments.amount)- SUM(advance_payments.captured)
FROM
(SELECT collection_intents.DATE, collection_intents.client_id,
    advances.captured, advances.AMOUNT
FROM
     (SELECT
        DATE(processing_scheduled_at) DATE,
        client_id
        FROM
            collection_intents
        WHERE
            state = "COLLECTION_INTENT_STATE_SCHEDULED"
        GROUP BY 1,2
        ORDER BY 1 DESC) collection_intents
JOIN
    (SELECT advances.id advance_id, advances.DATE payout_date, advance_payments.DATE payback_date, IFNULL(advance_payments.captured,0) captured,
       advances.amount, cashboosts.client_id
        FROM (SELECT DATE(funding_date) DATE, cashboost_id, id, SUM(amount) AMOUNT
        FROM advances
        WHERE archived_at IS NULL
        AND accounting_type = 'ADVANCE_ACCOUNTING_TYPE_STATE_MACHINE'
        GROUP BY 1 ,2, 3) advances
LEFT JOIN
    (SELECT
                advance_id,
                DATE(created_at) AS DATE,
                SUM(captured_amount) AS captured
            FROM
                advance_payments
            GROUP by
                1, 2) advance_payments
ON advances.id = advance_payments.advance_id
AND advance_payments.DATE > advances.DATE
INNER JOIN cashboosts ON cashboosts.id = advances.cashboost_id
ORDER BY 4 desc,5 desc, 6) advances
    ON advances.payout_date < collection_intents.DATE
    AND advances.client_id = collection_intents.client_id
    ORDER BY 1 DESC,2) TEMP1
GROUP BY 1,2
ORDER BY 2, 1 DESC) TEMP2
ON TEMP1.DATE = TEMP2.DATE
AND TEMP1.client_id = TEMP2.client_id
GROUP BY 1,2
ORDER BY 1 DESC;

# VERSION
SELECT TEMP1.DATE, SUM(TEMP1.captured) AS CAPTURED,
       SUM(TEMP1.amount) AS AMOUNT, SUM(TEMP1.amount)- SUM(TEMP1.captured) OUTSTANDING
FROM
(SELECT TEMP.DATE, client_id, SUM(TEMP.captured) AS CAPTURED,
           SUM(TEMP.amount) AS AMOUNT
FROM
(SELECT collection_intents.DATE, collection_intents.client_id,
    advances.captured, advances.AMOUNT
FROM
     (SELECT
        DATE(processing_scheduled_at) DATE,
        client_id
        FROM
            collection_intents
        WHERE
            state = "COLLECTION_INTENT_STATE_SCHEDULED"
        GROUP BY 1,2
        ORDER BY 1 DESC) collection_intents
JOIN
    (SELECT advances.id advance_id, advances.DATE payout_date, advance_payments.DATE payback_date, IFNULL(advance_payments.captured,0) captured,
       advances.amount, cashboosts.client_id
        FROM (SELECT DATE(funding_date) DATE, cashboost_id, id, SUM(amount) AMOUNT
        FROM advances
        WHERE archived_at IS NULL
        AND accounting_type = 'ADVANCE_ACCOUNTING_TYPE_STATE_MACHINE'
        GROUP BY 1 ,2, 3) advances
LEFT JOIN
    (SELECT
                advance_id,
                DATE(created_at) AS DATE,
                SUM(captured_amount) AS captured
            FROM
                advance_payments
            GROUP by
                1, 2) advance_payments
ON advances.id = advance_payments.advance_id
AND advance_payments.DATE > advances.DATE
INNER JOIN cashboosts ON cashboosts.id = advances.cashboost_id
ORDER BY 4 desc,5 desc, 6) advances
    ON advances.payback_date < collection_intents.DATE
    AND advances.client_id = collection_intents.client_id
    ORDER BY 1 DESC,2) TEMP
GROUP BY 1,2
ORDER BY 1 DESC) TEMP1
GROUP BY 1
ORDER BY 1 DESC;

# FINAL VERSION


;

# helper
SELECT advance_payments.advance_id, advance_payments.DATE, SUM(advance_payments.captured) AS CAPTURED,
       MAX(advances.AMOUNT) AS AMOUNT, cashboosts.client_id as client_id
FROM advances
LEFT JOIN (SELECT
            advance_id,
            DATE(created_at) AS DATE,
            SUM(captured_amount) AS captured
        FROM
            advance_payments
        WHERE
            stripe_failure_code IS NULL
        GROUP by
            1, 2) advance_payments ON advances.id = advance_payments.advance_id
INNER JOIN cashboosts ON advances.cashboost_id = cashboosts.id AND cashboosts.archived_at IS NULL
GROUP BY 1, 2, 5
ORDER BY 2 DESC;

#HELPER2
SELECT advances.id advance_id, advances.DATE payout_date, advance_payments.DATE payback_date, IFNULL(advance_payments.captured,0) captured,
       advances.amount, cashboosts.client_id
FROM (
        SELECT DATE(funding_date) DATE, cashboost_id, id, SUM(amount) AMOUNT
    FROM advances
    WHERE archived_at IS NULL
    AND accounting_type = 'ADVANCE_ACCOUNTING_TYPE_STATE_MACHINE'
    GROUP BY 1 ,2, 3
    ORDER BY 2,1 ) advances
LEFT JOIN
    (SELECT
                advance_id,
                DATE(created_at) AS DATE,
                SUM(captured_amount) AS captured
            FROM
                advance_payments
            GROUP by
                1, 2) advance_payments
ON advances.id = advance_payments.advance_id
AND advance_payments.DATE > advances.DATE
INNER JOIN cashboosts ON cashboosts.id = advances.cashboost_id
ORDER BY 6, 5;



#Helper 3 with advance table figure out
SELECT DATE(funding_date) DATE, cashboost_id, id, SUM(amount) AMOUNT
FROM advances
WHERE archived_at IS NULL
AND accounting_type = 'ADVANCE_ACCOUNTING_TYPE_STATE_MACHINE'
GROUP BY 1 ,2, 3;




#PAYOUT
SELECT collection_intents.DATE, collection_intents.client_id,
    advances.captured, advances.AMOUNT
FROM
     (SELECT
        DATE(processing_scheduled_at) DATE,
        client_id
        FROM
            collection_intents
        WHERE
            state = "COLLECTION_INTENT_STATE_SCHEDULED"
        GROUP BY 1,2
        ORDER BY 1 DESC) collection_intents
JOIN
    (SELECT advances.id advance_id, advances.DATE payout_date, advance_payments.DATE payback_date, IFNULL(advance_payments.captured,0) captured,
       advances.amount, cashboosts.client_id
        FROM (SELECT DATE(funding_date) DATE, cashboost_id, id, SUM(amount) AMOUNT
        FROM advances
        WHERE archived_at IS NULL
        AND accounting_type = 'ADVANCE_ACCOUNTING_TYPE_STATE_MACHINE'
        GROUP BY 1 ,2, 3) advances
LEFT JOIN
    (SELECT
                advance_id,
                DATE(created_at) AS DATE,
                SUM(captured_amount) AS captured
            FROM
                advance_payments
            GROUP by
                1, 2) advance_payments
ON advances.id = advance_payments.advance_id
AND advance_payments.DATE > advances.DATE
INNER JOIN cashboosts ON cashboosts.id = advances.cashboost_id
ORDER BY 4 desc,5 desc, 6) advances
    ON advances.payout_date < collection_intents.DATE
    AND advances.client_id = collection_intents.client_id
    ORDER BY 1 DESC,2;


#PAYBACK
SELECT collection_intents.DATE, collection_intents.client_id,
    SUM(advances.captured), MAX(advances.AMOUNT)
FROM
     (SELECT
        DATE(processing_scheduled_at) DATE,
        client_id
        FROM
            collection_intents
        WHERE
            state = "COLLECTION_INTENT_STATE_SCHEDULED"
        GROUP BY 1,2
        ORDER BY 1 DESC) collection_intents
JOIN
    (SELECT advances.id advance_id, advances.DATE payout_date, advance_payments.DATE payback_date, IFNULL(advance_payments.captured,0) captured,
       advances.amount, cashboosts.client_id
        FROM (SELECT DATE(funding_date) DATE, cashboost_id, id, SUM(amount) AMOUNT
        FROM advances
        WHERE archived_at IS NULL
        AND accounting_type = 'ADVANCE_ACCOUNTING_TYPE_STATE_MACHINE'
        GROUP BY 1 ,2, 3) advances
LEFT JOIN
    (SELECT
                advance_id,
                DATE(created_at) AS DATE,
                SUM(captured_amount) AS captured
            FROM
                advance_payments
            GROUP by
                1, 2) advance_payments
ON advances.id = advance_payments.advance_id
AND advance_payments.DATE > advances.DATE
INNER JOIN cashboosts ON cashboosts.id = advances.cashboost_id
ORDER BY 4 desc,5 desc, 6) advances
    ON advances.payback_date < collection_intents.DATE
    AND advances.client_id = collection_intents.client_id
    GROUP BY 1,2
    ORDER BY 1 DESC,2;


#PAYOUT
SELECT TEMP1.DATE, TEMP1.client_id, SUM(TEMP1.captured) AS CAPTURED,
           SUM(TEMP1.amount) AS AMOUNT, (SUM(TEMP1.amount)-SUM(TEMP1.captured)) AS OUTSTANDING
#     SUM(advance_payments.amount)- SUM(advance_payments.captured)
FROM
(SELECT collection_intents.DATE, collection_intents.client_id,
    advances.captured, advances.AMOUNT
FROM
     (SELECT
        DATE(processing_scheduled_at) DATE,
        client_id
        FROM
            collection_intents
        WHERE
            state = "COLLECTION_INTENT_STATE_SCHEDULED"
        GROUP BY 1,2
        ORDER BY 1 DESC) collection_intents
JOIN
    (SELECT advances.id advance_id, advances.DATE payout_date, advance_payments.DATE payback_date, IFNULL(advance_payments.captured,0) captured,
       advances.amount, cashboosts.client_id
        FROM (SELECT DATE(funding_date) DATE, cashboost_id, id, SUM(amount) AMOUNT
        FROM advances
        WHERE archived_at IS NULL
        AND accounting_type = 'ADVANCE_ACCOUNTING_TYPE_STATE_MACHINE'
        GROUP BY 1 ,2, 3) advances
LEFT JOIN
    (SELECT
                advance_id,
                DATE(created_at) AS DATE,
                SUM(captured_amount) AS captured
            FROM
                advance_payments
            GROUP by
                1, 2) advance_payments
ON advances.id = advance_payments.advance_id
AND advance_payments.DATE > advances.DATE
INNER JOIN cashboosts ON cashboosts.id = advances.cashboost_id
ORDER BY 4 desc,5 desc, 6) advances
    ON advances.payout_date < collection_intents.DATE
    AND advances.client_id = collection_intents.client_id
    ORDER BY 1 DESC,2) TEMP1
GROUP BY 1,2
ORDER BY 2, 1 DESC;


#PAYBACK
SELECT TEMP1.DATE, TEMP1.client_id, SUM(TEMP1.captured) AS CAPTURED,
           SUM(TEMP1.amount) AS AMOUNT, (SUM(TEMP1.amount)-SUM(TEMP1.captured)) AS OUTSTANDING
#     SUM(advance_payments.amount)- SUM(advance_payments.captured)
FROM
(SELECT collection_intents.DATE, collection_intents.client_id,
    advances.captured, advances.AMOUNT
FROM
     (SELECT
        DATE(processing_scheduled_at) DATE,
        client_id
        FROM
            collection_intents
        WHERE
            state = "COLLECTION_INTENT_STATE_SCHEDULED"
        GROUP BY 1,2
        ORDER BY 1 DESC) collection_intents
JOIN
    (SELECT advances.id advance_id, advances.DATE payout_date, advance_payments.DATE payback_date, IFNULL(advance_payments.captured,0) captured,
       advances.amount, cashboosts.client_id
        FROM (SELECT DATE(funding_date) DATE, cashboost_id, id, SUM(amount) AMOUNT
        FROM advances
        WHERE archived_at IS NULL
        AND accounting_type = 'ADVANCE_ACCOUNTING_TYPE_STATE_MACHINE'
        GROUP BY 1 ,2, 3) advances
LEFT JOIN
    (SELECT
                advance_id,
                DATE(created_at) AS DATE,
                SUM(captured_amount) AS captured
            FROM
                advance_payments
            GROUP by
                1, 2) advance_payments
ON advances.id = advance_payments.advance_id
AND advance_payments.DATE > advances.DATE
INNER JOIN cashboosts ON cashboosts.id = advances.cashboost_id
ORDER BY 4 desc,5 desc, 6) advances
    ON advances.payback_date < collection_intents.DATE
    AND advances.client_id = collection_intents.client_id
    ORDER BY 1 DESC,2) TEMP1
GROUP BY 1,2
ORDER BY 2, 1 DESC;
